{"remainingRequest":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/TableFooter.js","dependencies":[{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/TableFooter.js","mtime":1574132205000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { mixins } from './utils';\n/* eslint-disable no-underscore-dangle */\n\nexport default {\n  name: 'TreeTable__footer',\n  mixins: [mixins],\n  data: function data() {\n    return {};\n  },\n  computed: {\n    table: function table() {\n      return this.$parent;\n    }\n  },\n  methods: {},\n  render: function render() {\n    var _this = this;\n\n    var h = arguments[0];\n\n    // 计算各列总和\n    function renderCell(_ref, columnIndex) {\n      var key = _ref.key;\n\n      if (columnIndex === 0) {\n        return this.table.sumText;\n      }\n\n      var rows = this.table.bodyData;\n      var values = rows.map(function (row) {\n        return Number(row[key]);\n      });\n      var precisions = [];\n      var notNumber = true;\n      values.forEach(function (value) {\n        if (!isNaN(value)) {\n          notNumber = false;\n          var decimal = value.toString().split('.')[1];\n          precisions.push(decimal ? decimal.length : 0);\n        }\n      });\n      var precision = Math.max.apply(null, precisions);\n\n      if (!notNumber) {\n        return values.reduce(function (prev, curr) {\n          var value = Number(curr);\n\n          if (!isNaN(value)) {\n            return parseFloat((prev + curr).toFixed(precision));\n          }\n\n          return prev;\n        }, 0);\n      }\n\n      return '';\n    } // className\n\n\n    function getClassName() {\n      var classList = [];\n      classList.push(\"\".concat(this.prefixCls, \"__footer-cell\"));\n\n      if (this.table.border) {\n        classList.push(\"\".concat(this.prefixCls, \"--border-cell\"));\n      }\n\n      return classList.join(' ');\n    } // Template\n\n\n    return h(\"table\", {\n      \"attrs\": {\n        \"cellspacing\": \"0\",\n        \"cellpadding\": \"0\",\n        \"border\": \"0\"\n      },\n      \"class\": \"\".concat(this.prefixCls, \"__footer\")\n    }, [h(\"colgroup\", [this.table.tableColumns.map(function (column) {\n      return h(\"col\", {\n        \"attrs\": {\n          \"width\": column.computedWidth || column.minWidth || column.width\n        }\n      });\n    })]), h(\"tfoot\", [h(\"tr\", {\n      \"class\": \"\".concat(this.prefixCls, \"__footer-row\")\n    }, [this.table.tableColumns.map(function (column, columnIndex) {\n      return h(\"td\", {\n        \"class\": getClassName.call(_this)\n      }, [h(\"div\", {\n        \"class\": \"\".concat(_this.prefixCls, \"__cell-inner\")\n      }, [_this.table.summaryMethod ? _this.table.summaryMethod(_this.table.bodyData, column, columnIndex) : renderCell.call(_this, column, columnIndex)])]);\n    })])])]);\n  }\n};",{"version":3,"sources":["/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/TableFooter.js"],"names":["mixins","name","data","computed","table","$parent","methods","render","renderCell","columnIndex","key","sumText","rows","bodyData","values","map","row","Number","precisions","notNumber","forEach","value","isNaN","decimal","toString","split","push","length","precision","Math","max","apply","reduce","prev","curr","parseFloat","toFixed","getClassName","classList","prefixCls","border","join","tableColumns","column","computedWidth","minWidth","width","call","summaryMethod"],"mappings":"AAAA,SAASA,MAAT,QAAuB,SAAvB;AAEA;;AACA,eAAe;AACbC,EAAAA,IAAI,EAAE,mBADO;AAEbD,EAAAA,MAAM,EAAE,CAACA,MAAD,CAFK;AAGbE,EAAAA,IAHa,kBAGN;AACL,WAAO,EAAP;AAGD,GAPY;AAQbC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KADQ,mBACA;AACN,aAAO,KAAKC,OAAZ;AACD;AAHO,GARG;AAabC,EAAAA,OAAO,EAAE,EAbI;AAgBbC,EAAAA,MAhBa,oBAgBJ;AAAA;;AAAA;;AACP;AACA,aAASC,UAAT,OAA6BC,WAA7B,EAA0C;AAAA,UAApBC,GAAoB,QAApBA,GAAoB;;AACxC,UAAID,WAAW,KAAK,CAApB,EAAuB;AACrB,eAAO,KAAKL,KAAL,CAAWO,OAAlB;AACD;;AACD,UAAMC,IAAI,GAAG,KAAKR,KAAL,CAAWS,QAAxB;AACA,UAAMC,MAAM,GAAGF,IAAI,CAACG,GAAL,CAAS,UAAAC,GAAG;AAAA,eAAIC,MAAM,CAACD,GAAG,CAACN,GAAD,CAAJ,CAAV;AAAA,OAAZ,CAAf;AACA,UAAMQ,UAAU,GAAG,EAAnB;AACA,UAAIC,SAAS,GAAG,IAAhB;AACAL,MAAAA,MAAM,CAACM,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,YAAI,CAACC,KAAK,CAACD,KAAD,CAAV,EAAmB;AACjBF,UAAAA,SAAS,GAAG,KAAZ;AACA,cAAMI,OAAO,GAAGF,KAAK,CAACG,QAAN,GAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAhB;AACAP,UAAAA,UAAU,CAACQ,IAAX,CAAgBH,OAAO,GAAGA,OAAO,CAACI,MAAX,GAAoB,CAA3C;AACD;AACF,OAND;AAOA,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBb,UAArB,CAAlB;;AACA,UAAI,CAACC,SAAL,EAAgB;AACd,eAAOL,MAAM,CAACkB,MAAP,CAAc,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACnC,cAAMb,KAAK,GAAGJ,MAAM,CAACiB,IAAD,CAApB;;AACA,cAAI,CAACZ,KAAK,CAACD,KAAD,CAAV,EAAmB;AACjB,mBAAOc,UAAU,CAAC,CAACF,IAAI,GAAGC,IAAR,EAAcE,OAAd,CAAsBR,SAAtB,CAAD,CAAjB;AACD;;AACD,iBAAOK,IAAP;AACD,SANM,EAMJ,CANI,CAAP;AAOD;;AACD,aAAO,EAAP;AACD,KA5BM,CA8BP;;;AACA,aAASI,YAAT,GAAwB;AACtB,UAAMC,SAAS,GAAG,EAAlB;AACAA,MAAAA,SAAS,CAACZ,IAAV,WAAkB,KAAKa,SAAvB;;AACA,UAAI,KAAKnC,KAAL,CAAWoC,MAAf,EAAuB;AACrBF,QAAAA,SAAS,CAACZ,IAAV,WAAkB,KAAKa,SAAvB;AACD;;AACD,aAAOD,SAAS,CAACG,IAAV,CAAe,GAAf,CAAP;AACD,KAtCM,CAwCP;;;AACA;AAAA;AAAA,uBACqB,GADrB;AAAA,uBACqC,GADrC;AAAA,kBACgD;AADhD;AAAA,yBAC+D,KAAKF,SADpE;AAAA,uBAGQ,KAAKnC,KAAL,CAAWsC,YAAX,CAAwB3B,GAAxB,CAA4B,UAAA4B,MAAM;AAAA;AAAA;AAAA,mBACrBA,MAAM,CAACC,aAAP,IAAwBD,MAAM,CAACE,QAA/B,IAA2CF,MAAM,CAACG;AAD7B;AAAA;AAAA,KAAlC,CAHR;AAAA,yBAQqB,KAAKP,SAR1B;AAAA,QASU,KAAKnC,KAAL,CAAWsC,YAAX,CAAwB3B,GAAxB,CAA4B,UAAC4B,MAAD,EAASlC,WAAT;AAAA;AAAA,iBAChB4B,YAAY,CAACU,IAAb,CAAkB,KAAlB;AADgB;AAAA,2BAEV,KAAI,CAACR,SAFK;AAAA,UAGtB,KAAI,CAACnC,KAAL,CAAW4C,aAAX,GACE,KAAI,CAAC5C,KAAL,CAAW4C,aAAX,CAAyB,KAAI,CAAC5C,KAAL,CAAWS,QAApC,EAA8C8B,MAA9C,EAAsDlC,WAAtD,CADF,GAEED,UAAU,CAACuC,IAAX,CAAgB,KAAhB,EAAsBJ,MAAtB,EAA8BlC,WAA9B,CALoB;AAAA,KAA5B,CATV;AAsBD;AA/EY,CAAf","sourcesContent":["import { mixins } from './utils';\n\n/* eslint-disable no-underscore-dangle */\nexport default {\n  name: 'TreeTable__footer',\n  mixins: [mixins],\n  data() {\n    return {\n\n    };\n  },\n  computed: {\n    table() {\n      return this.$parent;\n    },\n  },\n  methods: {\n\n  },\n  render() {\n    // 计算各列总和\n    function renderCell({ key }, columnIndex) {\n      if (columnIndex === 0) {\n        return this.table.sumText;\n      }\n      const rows = this.table.bodyData;\n      const values = rows.map(row => Number(row[key]));\n      const precisions = [];\n      let notNumber = true;\n      values.forEach((value) => {\n        if (!isNaN(value)) {\n          notNumber = false;\n          const decimal = value.toString().split('.')[1];\n          precisions.push(decimal ? decimal.length : 0);\n        }\n      });\n      const precision = Math.max.apply(null, precisions);\n      if (!notNumber) {\n        return values.reduce((prev, curr) => {\n          const value = Number(curr);\n          if (!isNaN(value)) {\n            return parseFloat((prev + curr).toFixed(precision));\n          }\n          return prev;\n        }, 0);\n      }\n      return '';\n    }\n\n    // className\n    function getClassName() {\n      const classList = [];\n      classList.push(`${this.prefixCls}__footer-cell`);\n      if (this.table.border) {\n        classList.push(`${this.prefixCls}--border-cell`);\n      }\n      return classList.join(' ');\n    }\n\n    // Template\n    return (\n      <table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class={ `${this.prefixCls}__footer` }>\n        <colgroup>\n          { this.table.tableColumns.map(column =>\n            <col width={ column.computedWidth || column.minWidth || column.width }></col>)\n          }\n        </colgroup>\n        <tfoot>\n          <tr class={ `${this.prefixCls}__footer-row` }>\n            { this.table.tableColumns.map((column, columnIndex) =>\n              <td class={ getClassName.call(this) }>\n                <div class={ `${this.prefixCls}__cell-inner` }>\n                  { this.table.summaryMethod\n                    ? this.table.summaryMethod(this.table.bodyData, column, columnIndex)\n                    : renderCell.call(this, column, columnIndex) }\n                </div>\n              </td>)\n            }\n          </tr>\n        </tfoot>\n      </table>\n    );\n  },\n};\n"]}]}