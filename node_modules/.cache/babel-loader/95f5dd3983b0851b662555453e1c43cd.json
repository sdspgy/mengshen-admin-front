{"remainingRequest":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/TableFooter.js","dependencies":[{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/TableFooter.js","mtime":1574132205000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { mixins } from './utils';\n/* eslint-disable no-underscore-dangle */\n\nexport default {\n  name: 'TreeTable__footer',\n  mixins: [mixins],\n  data: function data() {\n    return {};\n  },\n  computed: {\n    table: function table() {\n      return this.$parent;\n    }\n  },\n  methods: {},\n  render: function render() {\n    var _this = this;\n\n    var h = arguments[0];\n\n    // 计算各列总和\n    function renderCell(_ref, columnIndex) {\n      var key = _ref.key;\n\n      if (columnIndex === 0) {\n        return this.table.sumText;\n      }\n\n      var rows = this.table.bodyData;\n      var values = rows.map(function (row) {\n        return Number(row[key]);\n      });\n      var precisions = [];\n      var notNumber = true;\n      values.forEach(function (value) {\n        if (!isNaN(value)) {\n          notNumber = false;\n          var decimal = value.toString().split('.')[1];\n          precisions.push(decimal ? decimal.length : 0);\n        }\n      });\n      var precision = Math.max.apply(null, precisions);\n\n      if (!notNumber) {\n        return values.reduce(function (prev, curr) {\n          var value = Number(curr);\n\n          if (!isNaN(value)) {\n            return parseFloat((prev + curr).toFixed(precision));\n          }\n\n          return prev;\n        }, 0);\n      }\n\n      return '';\n    } // className\n\n\n    function getClassName() {\n      var classList = [];\n      classList.push(\"\".concat(this.prefixCls, \"__footer-cell\"));\n\n      if (this.table.border) {\n        classList.push(\"\".concat(this.prefixCls, \"--border-cell\"));\n      }\n\n      return classList.join(' ');\n    } // Template\n\n\n    return h(\"table\", {\n      \"attrs\": {\n        \"cellspacing\": \"0\",\n        \"cellpadding\": \"0\",\n        \"border\": \"0\"\n      },\n      \"class\": \"\".concat(this.prefixCls, \"__footer\")\n    }, [h(\"colgroup\", [this.table.tableColumns.map(function (column) {\n      return h(\"col\", {\n        \"attrs\": {\n          \"width\": column.computedWidth || column.minWidth || column.width\n        }\n      });\n    })]), h(\"tfoot\", [h(\"tr\", {\n      \"class\": \"\".concat(this.prefixCls, \"__footer-row\")\n    }, [this.table.tableColumns.map(function (column, columnIndex) {\n      return h(\"td\", {\n        \"class\": getClassName.call(_this)\n      }, [h(\"div\", {\n        \"class\": \"\".concat(_this.prefixCls, \"__cell-inner\")\n      }, [_this.table.summaryMethod ? _this.table.summaryMethod(_this.table.bodyData, column, columnIndex) : renderCell.call(_this, column, columnIndex)])]);\n    })])])]);\n  }\n};",null]}