{"remainingRequest":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/store/modules/app.js","dependencies":[{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/store/modules/app.js","mtime":1574132205000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport { otherRouter } from '@/router/router';\nimport { router } from '@/router/index';\nimport Util from '@/libs/util';\nimport Cookies from 'js-cookie';\nimport Vue from 'vue';\nvar app = {\n  state: {\n    loading: false,\n    // 全局加载动画\n    added: false,\n    // 加载路由标志\n    navList: [],\n    // 顶部菜单\n    currNav: \"\",\n    // 当前顶部菜单name\n    currNavTitle: \"\",\n    // 当前顶部菜单标题\n    cachePage: [],\n    lang: '',\n    isFullScreen: false,\n    openedSubmenuArr: [],\n    // 要展开的菜单数组\n    menuTheme: 'dark',\n    // 主题\n    themeColor: '',\n    pageOpenedList: [{\n      title: '首页',\n      path: '',\n      name: 'home_index'\n    }],\n    currentPageName: '',\n    currentPath: [{\n      title: '首页',\n      path: '',\n      name: 'home_index'\n    }],\n    // 面包屑数组\n    menuList: [],\n    routers: [otherRouter],\n    tagsList: _toConsumableArray(otherRouter.children),\n    messageCount: 0,\n    // 在这里定义你不想要缓存的页面的name属性值(参见路由配置router.js)\n    dontCache: ['test', 'test']\n  },\n  mutations: {\n    // 动态添加主界面路由，需要缓存\n    updateAppRouter: function updateAppRouter(state, routes) {\n      var _state$routers;\n\n      (_state$routers = state.routers).push.apply(_state$routers, _toConsumableArray(routes));\n\n      router.addRoutes(routes);\n    },\n    // 动态添加全局路由404、500等页面，不需要缓存\n    updateDefaultRouter: function updateDefaultRouter(state, routes) {\n      router.addRoutes(routes);\n    },\n    setLoading: function setLoading(state, v) {\n      state.loading = v;\n    },\n    setAdded: function setAdded(state, v) {\n      state.added = v;\n    },\n    setNavList: function setNavList(state, list) {\n      state.navList = list;\n    },\n    setCurrNav: function setCurrNav(state, v) {\n      state.currNav = v;\n    },\n    setCurrNavTitle: function setCurrNavTitle(state, v) {\n      state.currNavTitle = v;\n    },\n    setTagsList: function setTagsList(state, list) {\n      var _state$tagsList;\n\n      (_state$tagsList = state.tagsList).push.apply(_state$tagsList, _toConsumableArray(list));\n    },\n    updateMenulist: function updateMenulist(state, routes) {\n      state.menuList = routes;\n    },\n    addOpenSubmenu: function addOpenSubmenu(state, name) {\n      var hasThisName = false;\n      var isEmpty = false;\n\n      if (name.length == 0) {\n        isEmpty = true;\n      }\n\n      if (state.openedSubmenuArr.indexOf(name) > -1) {\n        hasThisName = true;\n      }\n\n      if (!hasThisName && !isEmpty) {\n        state.openedSubmenuArr.push(name);\n      }\n    },\n    closePage: function closePage(state, name) {\n      state.cachePage.forEach(function (item, index) {\n        if (item == name) {\n          state.cachePage.splice(index, 1);\n        }\n      });\n    },\n    initCachepage: function initCachepage(state) {\n      if (localStorage.cachePage) {\n        state.cachePage = JSON.parse(localStorage.cachePage);\n      }\n    },\n    removeTag: function removeTag(state, name) {\n      state.pageOpenedList.map(function (item, index) {\n        if (item.name == name) {\n          state.pageOpenedList.splice(index, 1);\n        }\n      });\n    },\n    pageOpenedList: function pageOpenedList(state, get) {\n      var openedPage = state.pageOpenedList[get.index];\n\n      if (get.argu) {\n        openedPage.argu = get.argu;\n      }\n\n      if (get.query) {\n        openedPage.query = get.query;\n      }\n\n      state.pageOpenedList.splice(get.index, 1, openedPage);\n      localStorage.pageOpenedList = JSON.stringify(state.pageOpenedList);\n    },\n    clearAllTags: function clearAllTags(state) {\n      state.pageOpenedList.splice(1);\n      state.cachePage.length = 0;\n      localStorage.pageOpenedList = JSON.stringify(state.pageOpenedList);\n    },\n    clearOtherTags: function clearOtherTags(state, vm) {\n      var currentName = vm.$route.name;\n      var currentIndex = 0;\n      state.pageOpenedList.forEach(function (item, index) {\n        if (item.name == currentName) {\n          currentIndex = index;\n        }\n      });\n\n      if (currentIndex == 0) {\n        state.pageOpenedList.splice(1);\n      } else {\n        state.pageOpenedList.splice(currentIndex + 1);\n        state.pageOpenedList.splice(1, currentIndex - 1);\n      }\n\n      var newCachepage = state.cachePage.filter(function (item) {\n        return item == currentName;\n      });\n      state.cachePage = newCachepage;\n      localStorage.pageOpenedList = JSON.stringify(state.pageOpenedList);\n    },\n    setOpenedList: function setOpenedList(state) {\n      state.pageOpenedList = localStorage.pageOpenedList ? JSON.parse(localStorage.pageOpenedList) : [otherRouter.children[0]];\n    },\n    setCurrentPath: function setCurrentPath(state, pathArr) {\n      state.currentPath = pathArr;\n    },\n    setCurrentPageName: function setCurrentPageName(state, name) {\n      state.currentPageName = name;\n    },\n    setAvatarPath: function setAvatarPath(state, path) {\n      localStorage.avatorImgPath = path;\n    },\n    switchLang: function switchLang(state, lang) {\n      state.lang = lang;\n      Vue.config.lang = lang;\n    },\n    clearOpenedSubmenu: function clearOpenedSubmenu(state) {\n      state.openedSubmenuArr.length = 0;\n    },\n    setMessageCount: function setMessageCount(state, count) {\n      state.messageCount = count;\n    },\n    increateTag: function increateTag(state, tagObj) {\n      if (!Util.oneOf(tagObj.name, state.dontCache)) {\n        state.cachePage.push(tagObj.name);\n        localStorage.cachePage = JSON.stringify(state.cachePage);\n      }\n\n      state.pageOpenedList.push(tagObj);\n      localStorage.pageOpenedList = JSON.stringify(state.pageOpenedList);\n    }\n  }\n};\nexport default app;",null]}