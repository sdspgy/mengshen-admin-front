{"remainingRequest":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/TableBody.js","dependencies":[{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/TableBody.js","mtime":1574132205000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Checkbox from '../Checkbox/Checkbox'; // eslint-disable-line\n// import Radio from '../Radio/Radio'; // eslint-disable-line\n\nimport { mixins } from './utils';\nimport { Radio } from 'iview'; // eslint-disable-line\n\n/* eslint-disable no-underscore-dangle */\n\nexport default {\n  name: 'TreeTable__body',\n  mixins: [mixins],\n  components: {\n    Radio: Radio\n  },\n  data: function data() {\n    return {\n      radioSelectedIndex: -1\n    };\n  },\n  computed: {\n    table: function table() {\n      return this.$parent;\n    }\n  },\n  methods: {\n    toggleStatus: function toggleStatus(type, row, rowIndex, value) {\n      this.validateType(type, ['Expanded', 'Checked', 'Hide', 'Fold'], 'toggleStatus', false);\n      var target = this.table.bodyData[rowIndex];\n      this.table.bodyData.splice(rowIndex, 1, _objectSpread({}, target, _defineProperty({}, \"_is\".concat(type), typeof value === 'undefined' ? !row[\"_is\".concat(type)] : value)));\n    },\n    getChildrenIndex: function getChildrenIndex(parentLevel, parentIndex) {\n      var careFold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var data = this.table.bodyData;\n      var childrenIndex = [];\n\n      for (var i = parentIndex + 1; i < data.length; i++) {\n        if (data[i]._level <= parentLevel) break;\n\n        if (data[i]._level - 1 === parentLevel) {\n          childrenIndex.push(i);\n        }\n      }\n\n      var len = childrenIndex.length; // important!!!\n\n      if (len > 0) {\n        for (var _i = 0; _i < len; _i++) {\n          var childData = data[childrenIndex[_i]];\n\n          if (childData._childrenLen && (!careFold || careFold && !childData._isFold)) {\n            childrenIndex = childrenIndex.concat(this.getChildrenIndex(childData._level, childrenIndex[_i], careFold));\n          }\n        }\n      }\n\n      return childrenIndex;\n    },\n    handleEvent: function handleEvent($event, type, data, others) {\n      var certainType = this.validateType(type, ['cell', 'row', 'checkbox', 'icon', 'radio'], 'handleEvent');\n      var eventType = $event ? $event.type : '';\n      var row = data.row,\n          rowIndex = data.rowIndex,\n          column = data.column,\n          columnIndex = data.columnIndex;\n      var latestData = this.table.bodyData; // Checkbox\n\n      if (certainType.checkbox) {\n        var isChecked = others.isChecked;\n        this.toggleStatus('Checked', row, rowIndex, isChecked);\n\n        if (row._childrenLen > 0) {\n          var childrenIndex = this.getChildrenIndex(row._level, rowIndex, false);\n\n          for (var i = 0; i < childrenIndex.length; i++) {\n            this.toggleStatus('Checked', latestData[childrenIndex[i]], childrenIndex[i], isChecked);\n          }\n        }\n\n        return this.table.$emit('checkbox-click', latestData[rowIndex], column, columnIndex, $event);\n      } // Radio\n\n\n      if (certainType.radio) {\n        this.radioSelectedIndex = rowIndex;\n        return this.table.$emit('radio-click', {\n          row: row,\n          rowIndex: rowIndex,\n          column: column,\n          columnIndex: columnIndex,\n          $event: $event\n        });\n      } // Tree's icon\n\n\n      if (certainType.icon) {\n        $event.stopPropagation();\n        this.toggleStatus('Fold', row, rowIndex);\n\n        var _childrenIndex = this.getChildrenIndex(row._level, rowIndex);\n\n        for (var _i2 = 0; _i2 < _childrenIndex.length; _i2++) {\n          this.toggleStatus('Hide', latestData[_childrenIndex[_i2]], _childrenIndex[_i2]);\n        }\n\n        return this.table.$emit('tree-icon-click', latestData[rowIndex], column, columnIndex, $event);\n      }\n\n      if (certainType.cell && eventType === 'click') {\n        // 点击扩展单元格\n        if (this.isExpandCell(this.table, columnIndex)) {\n          this.toggleStatus('Expanded', row, rowIndex);\n          return this.table.$emit('expand-cell-click', latestData[rowIndex], column, columnIndex, $event);\n        }\n      } // 行：Hover\n\n\n      if (certainType.row && (eventType === 'mouseenter' || eventType === 'mouseleave')) {\n        var hover = others.hover;\n        var target = latestData[rowIndex];\n        latestData.splice(rowIndex, 1, _objectSpread({}, target, {\n          _isHover: hover\n        }));\n      }\n\n      if (certainType.row && others && others.clickRow && certainType.radio) {\n        this.radioSelectedIndex = rowIndex;\n        return this.table.$emit('radio-click', {\n          row: row,\n          rowIndex: rowIndex,\n          column: column,\n          columnIndex: columnIndex,\n          $event: $event\n        });\n      }\n\n      if (certainType.cell) {\n        return this.table.$emit(\"\".concat(type, \"-\").concat(eventType), latestData[rowIndex], rowIndex, column, columnIndex, $event);\n      }\n\n      return this.table.$emit(\"\".concat(type, \"-\").concat(eventType), latestData[rowIndex], rowIndex, $event);\n    }\n  },\n  render: function render() {\n    var _this2 = this;\n\n    var h = arguments[0];\n\n    // key\n    // function getKey(row, rowIndex) {\n    //   const rowKey = this.table.rowKey;\n    //   if (rowKey) {\n    //     return rowKey.call(null, row, rowIndex);\n    //   }\n    //   return rowIndex;\n    // }\n    // style\n    function getStyle(type, row, rowIndex, column, columnIndex) {\n      var certainType = this.validateType(type, ['cell', 'row'], 'getStyle');\n      var style = this.table[\"\".concat(type, \"Style\")];\n\n      if (typeof style === 'function') {\n        if (certainType.row) {\n          return style.call(null, row, rowIndex);\n        }\n\n        if (certainType.cell) {\n          return style.call(null, row, rowIndex, column, columnIndex);\n        }\n      }\n\n      return style;\n    } // className\n\n\n    function getClassName(type, row, rowIndex, column, columnIndex) {\n      var certainType = this.validateType(type, ['cell', 'row', 'inner'], 'getClassName');\n      var classList = [];\n\n      if (column && column.key == \"_normalIndex\") {\n        classList.push(\"\".concat(this.prefixCls, \"--center-cell\"));\n      } // console.log(certainType.inner)\n\n\n      if (certainType.row || certainType.cell) {\n        var className = this.table[\"\".concat(type, \"ClassName\")];\n\n        if (typeof className === 'string') {\n          classList.push(className);\n        } else if (typeof className === 'function') {\n          if (certainType.row) {\n            classList.push(className.call(null, row, rowIndex) || '');\n          }\n\n          if (certainType.cell) {\n            classList.push(className.call(null, row, rowIndex, column, columnIndex) || '');\n          }\n        }\n\n        if (certainType.row) {\n          classList.push(\"\".concat(this.prefixCls, \"__body-row\"));\n\n          if (this.table.stripe && rowIndex % 2 !== 0) {\n            classList.push(\"\".concat(this.prefixCls, \"--stripe-row\"));\n          }\n\n          if (this.table.showRowHover && row._isHover) {\n            classList.push(\"\".concat(this.prefixCls, \"--row-hover\"));\n          }\n        }\n\n        if (certainType.cell) {\n          classList.push(\"\".concat(this.prefixCls, \"__body-cell\"));\n\n          if (this.table.border) {\n            classList.push(\"\".concat(this.prefixCls, \"--border-cell\"));\n          }\n\n          var align = column.align;\n\n          if (['center', 'right'].indexOf(align) > -1) {\n            classList.push(\"\".concat(this.prefixCls, \"--\").concat(align, \"-cell\"));\n          }\n        }\n      }\n\n      if (certainType.inner) {\n        classList.push(\"\".concat(this.prefixCls, \"__cell-inner\"));\n\n        if (this.isExpandCell(this.table, columnIndex)) {\n          classList.push(\"\".concat(this.prefixCls, \"--expand-inner\"));\n\n          if (row._isExpanded) {\n            classList.push(\"\".concat(this.prefixCls, \"--expanded-inner\"));\n          }\n        }\n      }\n\n      return classList.join(' ');\n    } // 根据type渲染单元格Cell\n\n\n    function renderCell(row, rowIndex, column, columnIndex) {\n      var _this = this;\n\n      // ExpandType\n      if (this.isExpandCell(this.table, columnIndex)) {\n        return h(\"i\", {\n          \"class\": 'zk-icon zk-icon-angle-right'\n        });\n      } // SelectionType's Checkbox\n\n\n      if (this.isSelectionCell(this.table, columnIndex)) {\n        var res = null;\n\n        if (this.table.selectType === 'checkbox') {\n          var allCheck;\n          var childrenIndex;\n          var hasChildren = row._childrenLen > 0;\n\n          if (hasChildren) {\n            childrenIndex = this.getChildrenIndex(row._level, rowIndex, false);\n            allCheck = true;\n\n            for (var i = 0; i < childrenIndex.length; i++) {\n              if (!this.table.bodyData[childrenIndex[i]]._isChecked) {\n                allCheck = false;\n                break;\n              }\n            }\n          } else {\n            allCheck = row._isChecked;\n          }\n\n          var indeterminate = false;\n\n          if (hasChildren && !allCheck) {\n            for (var _i3 = 0; _i3 < childrenIndex.length; _i3++) {\n              if (this.table.bodyData[childrenIndex[_i3]]._isChecked) {\n                indeterminate = true;\n                break;\n              }\n            }\n          }\n\n          res = h(Checkbox, {\n            \"attrs\": {\n              \"indeterminate\": indeterminate,\n              \"value\": allCheck\n            },\n            \"on\": {\n              \"on-change\": function onChange(isChecked) {\n                return _this.handleEvent(null, 'checkbox', {\n                  row: row,\n                  rowIndex: rowIndex,\n                  column: column,\n                  columnIndex: columnIndex\n                }, {\n                  isChecked: isChecked\n                });\n              }\n            }\n          });\n        } else {\n          res = h(Radio, {\n            \"attrs\": {\n              \"value\": this.radioSelectedIndex === rowIndex\n            },\n            \"on\": {\n              \"on-change\": function onChange() {\n                return _this.handleEvent(null, 'radio', {\n                  row: row,\n                  rowIndex: rowIndex,\n                  column: column,\n                  columnIndex: columnIndex\n                });\n              }\n            }\n          });\n        }\n\n        return res;\n      } // Tree's firstProp\n\n\n      if (this.table.treeType && this.table.firstProp === column.key) {\n        return h(\"span\", {\n          \"class\": \"\".concat(this.prefixCls, \"--level-\").concat(row._level, \"-cell\"),\n          \"style\": {\n            marginLeft: \"\".concat((row._level - 1) * 24, \"px\"),\n            paddingLeft: row._childrenLen === 0 ? '20px' : ''\n          }\n        }, [row._childrenLen > 0 && h(\"i\", {\n          \"class\": \"\".concat(this.prefixCls, \"--tree-icon zk-icon zk-icon-\").concat(row._isFold ? 'plus' : 'minus', \"-square-o\"),\n          \"on\": {\n            \"click\": function click($event) {\n              return _this.handleEvent($event, 'icon', {\n                row: row,\n                rowIndex: rowIndex,\n                column: column,\n                columnIndex: columnIndex\n              }, {\n                isFold: row._isFold\n              });\n            }\n          }\n        }), row[column.key] ? row[column.key] : '']);\n      } // TreeType children's index\n\n\n      if (this.table.showIndex && this.table.treeType && column.key === '_normalIndex' && row._level > 1) {\n        return '';\n      }\n\n      if (column.type === undefined || column.type === 'custom') {\n        return row[column.key];\n      } else if (column.type === 'template') {\n        return this.table.$scopedSlots[column.template] ? this.table.$scopedSlots[column.template]({\n          row: row,\n          rowIndex: rowIndex,\n          column: column,\n          columnIndex: columnIndex\n        }) : '';\n      }\n\n      return '';\n    } // Template\n\n\n    return h(\"table\", {\n      \"attrs\": {\n        \"cellspacing\": \"0\",\n        \"cellpadding\": \"0\",\n        \"border\": \"0\"\n      },\n      \"class\": \"\".concat(this.prefixCls, \"__body\")\n    }, [h(\"colgroup\", [this.table.tableColumns.map(function (column) {\n      return h(\"col\", {\n        \"attrs\": {\n          \"width\": column.computedWidth || column.minWidth || column.width\n        }\n      });\n    })]), h(\"tbody\", [this.table.bodyData.length > 0 ? this.table.bodyData.map(function (row, rowIndex) {\n      return [h(\"tr\", {\n        \"directives\": [{\n          name: \"show\",\n          value: !row._isHide\n        }],\n        \"key\": \"table_row_\".concat(rowIndex),\n        \"style\": getStyle.call(_this2, 'row', row, rowIndex),\n        \"class\": getClassName.call(_this2, 'row', row, rowIndex),\n        \"on\": {\n          \"click\": function click($event) {\n            return _this2.handleEvent($event, 'row', {\n              row: row,\n              rowIndex: rowIndex\n            }, {\n              clickRow: true\n            });\n          },\n          \"dblclick\": function dblclick($event) {\n            return _this2.handleEvent($event, 'row', {\n              row: row,\n              rowIndex: rowIndex\n            });\n          },\n          \"contextmenu\": function contextmenu($event) {\n            return _this2.handleEvent($event, 'row', {\n              row: row,\n              rowIndex: rowIndex\n            });\n          },\n          \"mouseenter\": function mouseenter($event) {\n            return _this2.handleEvent($event, 'row', {\n              row: row,\n              rowIndex: rowIndex\n            }, {\n              hover: true\n            });\n          },\n          \"mouseleave\": function mouseleave($event) {\n            return _this2.handleEvent($event, 'row', {\n              row: row,\n              rowIndex: rowIndex\n            }, {\n              hover: false\n            });\n          }\n        }\n      }, [_this2.table.tableColumns.map(function (column, columnIndex) {\n        return h(\"td\", {\n          \"style\": getStyle.call(_this2, 'cell', row, rowIndex, column, columnIndex),\n          \"class\": getClassName.call(_this2, 'cell', row, rowIndex, column, columnIndex),\n          \"on\": {\n            \"click\": function click($event) {\n              return _this2.handleEvent($event, 'cell', {\n                row: row,\n                rowIndex: rowIndex,\n                column: column,\n                columnIndex: columnIndex\n              });\n            },\n            \"dblclick\": function dblclick($event) {\n              return _this2.handleEvent($event, 'cell', {\n                row: row,\n                rowIndex: rowIndex,\n                column: column,\n                columnIndex: columnIndex\n              });\n            },\n            \"contextmenu\": function contextmenu($event) {\n              return _this2.handleEvent($event, 'cell', {\n                row: row,\n                rowIndex: rowIndex,\n                column: column,\n                columnIndex: columnIndex\n              });\n            },\n            \"mouseenter\": function mouseenter($event) {\n              return _this2.handleEvent($event, 'cell', {\n                row: row,\n                rowIndex: rowIndex,\n                column: column,\n                columnIndex: columnIndex\n              });\n            },\n            \"mouseleave\": function mouseleave($event) {\n              return _this2.handleEvent($event, 'cell', {\n                row: row,\n                rowIndex: rowIndex,\n                column: column,\n                columnIndex: columnIndex\n              });\n            }\n          }\n        }, [h(\"div\", {\n          \"class\": getClassName.call(_this2, 'inner', row, rowIndex, column, columnIndex)\n        }, [renderCell.call(_this2, row, rowIndex, column, columnIndex)])]);\n      })]), _this2.table.expandType && row._isExpanded && h(\"tr\", {\n        \"key\": rowIndex,\n        \"class\": \"\".concat(_this2.prefixCls, \"__body-row \").concat(_this2.prefixCls, \"--expand-row\")\n      }, [h(\"td\", {\n        \"class\": \"\".concat(_this2.prefixCls, \"--expand-content\"),\n        \"attrs\": {\n          \"colspan\": _this2.table.tableColumns.length\n        }\n      }, [_this2.table.$scopedSlots.expand ? _this2.table.$scopedSlots.expand({\n        row: row,\n        rowIndex: rowIndex\n      }) : ''])])];\n    }) : h(\"tr\", {\n      \"class\": \"\".concat(this.prefixCls, \"--empty-row\")\n    }, [h(\"td\", {\n      \"class\": \"\".concat(this.prefixCls, \"__body-cell \").concat(this.prefixCls, \"--empty-content\"),\n      \"attrs\": {\n        \"colspan\": this.table.tableColumns.length\n      }\n    }, [this.table.emptyText])])])]);\n  }\n};",null]}