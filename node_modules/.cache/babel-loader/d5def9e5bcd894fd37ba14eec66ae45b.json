{"remainingRequest":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/Table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/my-components/tree-table/Table/Table.vue","mtime":1574132205000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TableHeader from './TableHeader';\nimport TableBody from './TableBody';\nimport TableFooter from './TableFooter';\nimport { mixins, scrollBarWidth as getSbw } from './utils';\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable no-param-reassign */\n// function getBodyData(data, isTreeType, childrenProp, isFold, level = 1) {\n\nfunction getBodyData(primaryKey, oldBodyData, data, isTreeType, childrenProp, isFold, parentFold) {\n  var level = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var bodyData = [];\n  data.forEach(function (row, index) {\n    var children = row[childrenProp];\n    var childrenLen = Object.prototype.toString.call(children).slice(8, -1) === 'Array' ? children.length : 0;\n    var curIsFold = isFold;\n\n    if (isFold && typeof primaryKey === 'string' && Array.isArray(oldBodyData)) {\n      for (var i = 0; i < oldBodyData.length; i++) {\n        var oldRow = oldBodyData[i];\n\n        if (oldRow[primaryKey] === row[primaryKey]) {\n          if ('_isFold' in oldRow) {\n            curIsFold = oldRow._isFold;\n          }\n\n          break;\n        }\n      }\n    }\n\n    bodyData.push(_objectSpread({\n      _isHover: false,\n      _isExpanded: false,\n      _isChecked: false,\n      _level: level,\n      // _isHide: isFold ? level !== 1 : false,\n      // _isFold: isFold,\n      _isHide: level !== 1 ? isFold && parentFold : false,\n      _isFold: isFold && curIsFold,\n      _childrenLen: childrenLen,\n      _normalIndex: index + 1\n    }, row));\n\n    if (isTreeType) {\n      if (childrenLen > 0) {\n        // bodyData = bodyData.concat(getBodyData(children, true, childrenProp, isFold, level + 1));\n        bodyData = bodyData.concat(getBodyData(primaryKey, oldBodyData, children, true, childrenProp, isFold, curIsFold, level + 1));\n      }\n    }\n  });\n  return bodyData;\n}\n\nfunction initialState(table, expandKey) {\n  return {\n    bodyHeight: 'auto',\n    firstProp: expandKey || table.columns[0] && table.columns[0].key,\n    // bodyData: getBodyData(table.data, table.treeType, table.childrenProp, table.isFold),\n    bodyData: getBodyData(table.primaryKey, table.bodyData, table.data, table.treeType, table.childrenProp, table.isFold, false)\n  };\n}\n\nfunction initialColumns(table, clientWidth) {\n  var columnsWidth = 0;\n  var minWidthColumns = [];\n  var otherColumns = [];\n  var columns = table.columns.concat();\n\n  if (table.expandType) {\n    columns.unshift({\n      width: '50'\n    });\n  }\n\n  if (table.selectable) {\n    columns.unshift({\n      width: '50'\n    });\n  }\n\n  if (table.showIndex) {\n    columns.unshift({\n      width: '50px',\n      key: '_normalIndex',\n      title: table.indexText\n    });\n  }\n\n  columns.forEach(function (column, index) {\n    var width = '';\n    var minWidth = '';\n\n    if (!column.width) {\n      if (column.minWidth) {\n        minWidth = typeof column.minWidth === 'number' ? column.minWidth : parseInt(column.minWidth, 10);\n      } else {\n        minWidth = 80;\n      }\n\n      minWidthColumns.push(_objectSpread({}, column, {\n        minWidth: minWidth,\n        _index: index\n      }));\n    } else {\n      width = typeof column.width === 'number' ? column.width : parseInt(column.width, 10);\n      otherColumns.push(_objectSpread({}, column, {\n        width: width,\n        _index: index\n      }));\n    }\n\n    columnsWidth += minWidth || width;\n  });\n  var scrollBarWidth = getSbw();\n  var totalWidth = columnsWidth + scrollBarWidth;\n  var isScrollX = totalWidth > clientWidth;\n\n  if (!isScrollX) {\n    var extraWidth = clientWidth - totalWidth;\n    var averageExtraWidth = Math.floor(extraWidth / minWidthColumns.length);\n    minWidthColumns.forEach(function (column) {\n      column.computedWidth = column.minWidth + averageExtraWidth;\n    });\n  }\n\n  var tableColumns = otherColumns.concat(minWidthColumns);\n  tableColumns.sort(function (a, b) {\n    return a._index - b._index;\n  });\n  return tableColumns;\n}\n\nexport default {\n  name: 'TreeTable',\n  mixins: [mixins],\n  components: {\n    TableHeader: TableHeader,\n    TableBody: TableBody,\n    TableFooter: TableFooter\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    columns: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    maxHeight: {\n      type: [String, Number],\n      default: 'auto'\n    },\n    stripe: {\n      type: Boolean,\n      default: false\n    },\n    border: {\n      type: Boolean,\n      default: false\n    },\n    treeType: {\n      type: Boolean,\n      default: true\n    },\n    childrenProp: {\n      type: String,\n      default: 'children'\n    },\n    isFold: {\n      type: Boolean,\n      default: true\n    },\n    expandType: {\n      type: Boolean,\n      default: true\n    },\n    selectable: {\n      type: Boolean,\n      default: true\n    },\n    selectType: {\n      type: String,\n      default: 'checkbox'\n    },\n    emptyText: {\n      type: String,\n      default: '暂无数据'\n    },\n    showHeader: {\n      type: Boolean,\n      default: true\n    },\n    showIndex: {\n      type: Boolean,\n      default: false\n    },\n    indexText: {\n      type: String,\n      default: '#'\n    },\n    showSummary: {\n      type: Boolean,\n      default: false\n    },\n    sumText: {\n      type: String,\n      default: '合计'\n    },\n    primaryKey: String,\n    summaryMethod: Function,\n    showRowHover: {\n      type: Boolean,\n      default: true\n    },\n    rowKey: Function,\n    rowClassName: [String, Function],\n    cellClassName: [String, Function],\n    rowStyle: [Object, Function],\n    cellStyle: [Object, Function],\n    expandKey: String\n  },\n  data: function data() {\n    return _objectSpread({\n      computedWidth: '',\n      computedHeight: '',\n      tableColumns: []\n    }, initialState(this, this.expandKey));\n  },\n  computed: {\n    bodyWrapperStyle: function bodyWrapperStyle() {\n      return {\n        height: this.bodyHeight\n      };\n    },\n    tableClass: function tableClass() {\n      return _defineProperty({}, \"\".concat(this.prefixCls, \"--border\"), this.border);\n    },\n    bodyClass: function bodyClass() {\n      return _defineProperty({}, \"\".concat(this.prefixCls, \"--stripe\"), this.stripe);\n    }\n  },\n  methods: {\n    handleEvent: function handleEvent(type, $event) {\n      this.validateType(type, ['header', 'body', 'footer'], 'handleEvent');\n      var eventType = $event.type;\n\n      if (eventType === 'scroll') {\n        this.$refs['header-wrapper'].scrollLeft = $event.target.scrollLeft;\n        this.$refs['footer-wrapper'].scrollLeft = $event.target.scrollLeft;\n      }\n\n      if (eventType === 'mousewheel') {\n        var deltaX = $event.deltaX;\n        var $body = this.$refs['body-wrapper'];\n\n        if (deltaX > 0) {\n          $body.scrollLeft += 10;\n        } else {\n          $body.scrollLeft -= 10;\n        }\n      }\n\n      return this.$emit(\"\".concat(type, \"-\").concat(eventType), $event);\n    },\n    // computedWidth, computedHeight, tableColumns\n    measure: function measure() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        var _this$$el = _this.$el,\n            clientWidth = _this$$el.clientWidth,\n            clientHeight = _this$$el.clientHeight;\n        _this.computedWidth = clientWidth + 2;\n        _this.computedHeight = clientHeight + 2;\n        var maxHeight = parseInt(_this.maxHeight, 10);\n\n        if (_this.maxHeight !== 'auto' && _this.computedHeight > maxHeight) {\n          _this.bodyHeight = \"\".concat(maxHeight - 83, \"px\");\n        }\n\n        _this.tableColumns = initialColumns(_this, clientWidth);\n      });\n    },\n    getCheckedProp: function getCheckedProp() {\n      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'index';\n\n      if (!this.selectable) {\n        return [];\n      }\n\n      var checkedIndexs = [];\n      this.bodyData.forEach(function (item, index) {\n        if (item._isChecked) {\n          if (key === 'index') {\n            checkedIndexs.push(index);\n          } else {\n            checkedIndexs.push(item[key]);\n          }\n        }\n      });\n      return checkedIndexs;\n    }\n  },\n  watch: {\n    $props: {\n      deep: true,\n      handler: function handler() {\n        Object.assign(this.$data, initialState(this, this.expandKey));\n      }\n    }\n  },\n  updated: function updated() {\n    this.measure();\n  },\n  mounted: function mounted() {\n    this.measure();\n    window.addEventListener('resize', this.measure);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.measure);\n  }\n};",null]}